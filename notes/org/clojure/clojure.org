#+TITLE: Clojure
#+SETUPFILE: ../../setup.org

* Unbind all vars in a namespace

  #+begin_src clojure
    (doseq [[sym var] (ns-publics *ns*)]
      (ns-unmap *ns* sym))
  #+end_src

  Or in Emacs, just run =M-x cider-undef-all=.

* Installation

  The clojure site [[https://clojure.org/guides/getting_started#_clojure_installer_and_cli_tools][suggests]] using the following:

  #+begin_src sh
    brew install clojure/tools/clojure
  #+end_src

  There is also a slightly different [[https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/clojure.rb][formula in homebrew core]]:

  #+begin_src sh
    brew install clojure
  #+end_src

  This one =depends_on "openjdk"=, so it will also install the latest =openjdk=
  homebrew package. The first method is preferred, which requires you to set up
  and configure a JDK yourself.

* Versions

** Clojure version

   #+begin_src clojure
     *clojure-version*
   #+end_src

** Java version

   #+begin_src clojure
     (System/getProperty "java.version")
   #+end_src

* Project Creation

** Minimal

   All you need is a project directory with a =deps.edn= and a =src/core.clj=.

   #+header: :dir ~/emacs/org-clojure
   #+header: :backend babashka
   #+begin_src clojure
     (require '[clojure.java.io])

     (def deps
       "{:deps
      {org.clojure/clojure {:mvn/version \"RELEASE\"}}}
     ")

     (def core
       "(ns core)

     (defn -main
       [& args]
       (println \"hello world!\"))
     ")

     (let [deps-path "hello_world/deps.edn"
           core-path "hello_world/src/core.clj"]
       (clojure.java.io/make-parents deps-path)
       (spit deps-path deps)
       (spit core-path core))
   #+end_src

   Run with:

   #+begin_src sh
     clojure -M -m core
   #+end_src

** neil

   This looks like the best way! Try this out!

** My deps-new template

   #+header: :dir ~/Projects/codenotes/clojure
   #+header: :var user="cfclrk"
   #+header: :var projectName="plaid-wrapper"
   #+begin_src sh :results output
     clojure \
         -Sdeps '{:deps
                  {net.clojars.cfclrk/minimal
                   {:local/root "/Users/cclark/Projects/codenotes/clojure/minimal"}}}' \
                       -Tnew \
                       create \
                       :template cfclrk/minimal \
                       :name $user/$projectName
   #+end_src

** deps-new

   First, make sure [[https://github.com/seancorfield/deps-new][deps-new]] is installed:

   #+begin_src sh :results output
     clojure -Ttools install \
             io.github.seancorfield/deps-new \
             '{:git/tag "v0.4.9"}' :as new
   #+end_src

   Create a new app:

   #+header: :dir ~/Projects/codenotes/clojure
   #+header: :var projectName="ring-compojure"
   #+begin_src sh
     clojure -Tnew app :name cfclrk/$projectName
   #+end_src

   Create a new lib:

   #+begin_src sh
     clojure -Tnew lib :name cfclrk/$projectName
   #+end_src

** Leiningen

   #+header: :dir ~/Projects/codenotes/clojure
   #+header: :var projectName="minesweeper"
   #+begin_src sh :results output
     lein new app cfclrk/$projectName
   #+end_src

* clj vs clojure

  =clj= is just a program that wraps =clojure= with =readline= support.

  #+begin_src bash :results output
    find /opt/homebrew/Cellar/clojure -name clj \
        | xargs grep exec
  #+end_src

  #+RESULTS:
  :   exec rlwrap -m -r -q '\"' -b "(){}[],^%#@\";:'" "$bin_dir/clojure" "$@"

  =readline= provides support for editing a command in the terminal (e.g. using
  arrow keys and =C-a= =C-e= =C-f= =C-b= for movement, and stuff like that.

  So, =clj= just provides better interactivity in the terminal REPL.

* Install a package

** Find package versions

  Say you want to install integrant:

  #+begin_src sh :results output
    clj -X:deps \
        find-versions \
        :lib integrant/integrant
  #+end_src

  Add that dependency, then build the project.

** Start clj with package

   #+begin_src sh
     clj -Sdeps '{:deps {cider/orchard {:mvn/version "0.9.2"}}}'
   #+end_src

* Tools

  Ok, so there is:

  1. tools.build
  2. tools.tools

  From the [[https://clojure.org/guides/tools_build][tools.build guide]]:

  #+begin_quote
  In the Clojure CLI, "tools" are programs that provide functionality and do not
  use your project deps or classpath. Tools executed with =-T:an-alias= remove
  all project deps and paths, add "=.=" as a path, and include any other deps or
  paths as defined in =:an-alias=.
  #+end_quote

** Where do tools live?

   Defined by an alias in =deps.edn=.

* Formatting and Pretty-Printing

  Good article: [[https://bogoyavlensky.com/blog/clojure-formatting-cljstyle/][Clojure formatting with cljstyle]].

** cljstyle

   Install

   #+begin_src sh
     brew install --cask cljstyle
   #+end_src

** cljfmt

   Format a project using =cljfmt=. Note, the =check= argument can also be
   "=fix=" to make the changes in-place.

   #+begin_src sh
     clojure -Sdeps '{:deps {cljfmt/cljfmt {:mvn/version "0.8.0"}}}' \
             -M -m cljfmt.main check
   #+end_src

** puget

   https://github.com/greglook/puget

** zprint

* Classpath

  This is how cider grabs it:

  #+begin_src clojure
    (seq (.split (System/getProperty "java.class.path") ":"))
  #+end_src

  Directories on the classpath:

  #+begin_src clojure
    (let [classpath-entries (.split (System/getProperty "java.class.path") ":")
          classpath-as-files (map clojure.java.io/file classpath-entries)
          classpath-dirs (filter #(.isDirectory %) classpath-as-files)]
      classpath-dirs)
  #+end_src

  : (#object[java.io.File 0x43602f98 "src"]
  :  #object[java.io.File 0x2b9120c6 "resources"])

* Cmd Execution and REPL

  Call a single function

  #+header: :dir ~/Projects/codenotes/clojure/scratch
  #+header: :var nsname="hello" funcname="foo"
  #+begin_src sh :results output
    clj -X $nsname/$funcname
  #+end_src

  #+RESULTS:
  : Hello world, the time is 09:42 AM

  Start a REPL that I can attach to from Emacs.

  #+begin_src sh
    clj -Sdeps '{:deps {cider/cider-nrepl {:mvn/version "RELEASE"}}}' \
        -m nrepl.cmdline \
        --middleware "[cider.nrepl/cider-middleware]"
  #+end_src

* Emacs Cider

  Basic workflow is described [[https://docs.cider.mx/cider/usage/cider_mode.html#basic-workflow][in the cider docs here]].

  - Open a file in the project
  - =M-x cider-jack-in=
  - Load a project file using =C-c C-k= (=cider-load-buffer=)
  - In the =*cider-repl= buffer, you know call the fully-qualified functions in
    that file.
    - Or, =(in-ns 'the.ns.name)= to call functions in that file without
      namespace qualification.
    - Then also =(use 'clojure.core)= and =(use 'clojure.repl)='
  - Edit a function, and =C-c C-e= on that function to reload it.

** Tips

   - From source file, =C-u C-c C-z= to jump to cider buffer already namespaced
     to the source file.
   - Quit a long-running eval with =C-c C-b= (=cider-interrupt=).

** Doc

   Function doc: =C-c C-d d= (=cider-doc=)

* HMAC

  The following clojure and python produce the same result.

  #+begin_src python
    import hmac
    import hashlib

    h = hmac.new(b'my key',"my message", hashlib.sha256)
    h.hexdigest()
  #+end_src

  #+begin_src clojure
    (import java.util.HexFormat)
    (import javax.crypto.spec.SecretKeySpec)

    (let [mac (Mac/getInstance "HmacSHA256")
          secret-key-spec (SecretKeySpec. (.getBytes "my key") "HmacSHA256")]
      (.init mac secret-key-spec)
      (let [my-bytes (.doFinal mac (.getBytes "my message"))]
        (.formatHex (HexFormat/of) my-bytes)))
  #+end_src

* Quickies

** Print environment variables

   #+begin_src clojure
     (doseq [[k v] (System/getenv)]
       (println k v))
   #+end_src

** Read and write a binary file

   #+begin_src clojure
     (import java.net.URI)
     (import java.nio.file.Paths)
     (import java.nio.file.Files)

     (defn read-file-bytes
       "Load the file at `path` into a byte[].
       `path` is a String relative to the this service's root directory."
       [^String path]
       (let [file-uri (.toURI (io/resource path))
             nio-path (Paths/get file-uri)]
         (Files/readAllBytes nio-path)))

     ;; Read file
     (def mypdf (read-file-bytes "resources/my.pdf"))

     ;; Write file
     (let [p (Paths/get (URI. "file:///Users/cclark/Downloads/bar.pdf"))
           opts (into-array java.nio.file.OpenOption [])]
       (Files/write p mypdf opts))
   #+end_src

** Org mode

   #+header: :backend clj-cli
   #+header: :args "-Sdeps '{:deps {inflections {:mvn/version \"0.13.2\"}}}'"
   #+begin_src clojure
     (use 'inflections.core)
     (plural "word")
   #+end_src

   #+header: :backend babashka
   #+begin_src clojure
     (range 3)
   #+end_src

  #+begin_src clojurescript
  #js {:foo "bar"}
  #+end_src

  #+RESULTS:
  : #js {:foo "bar"}

  #+BEGIN_SRC clojure :backend clojure-cli
  (= *file* (System/getProperty "babashka.file"))
  #+END_SRC

  #+RESULTS:
  : false

* core.async

  There are some great examples from O'Reilly [[https://resources.oreilly.com/examples/0636920041474/][here]], which is supplemental
  content for their excellent video course [[https://learning.oreilly.com/videos/communicating-sequential-processes/9781771374293/][Communicating Sequential Processes
  with core.async]].
