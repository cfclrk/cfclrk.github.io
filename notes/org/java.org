#+TITLE: Java
#+SETUPFILE: ../setup.org

* Installation

  Best resource I've found is [[https://mkyong.com/java/how-to-install-java-on-mac-osx/][How to install Java JDK on macOS]].

** Latest version

  #+begin_src sh
    brew install openjdk
  #+end_src

  As stated in the instructions printed by =brew info openjdk=, run:

  #+begin_src sh
    sudo ln -svfn \
         $(brew --prefix)/opt/openjdk/libexec/openjdk.jdk \
         /Library/Java/JavaVirtualMachines/openjdk.jdk
  #+end_src

** Older versions

   Older java packages may not work on Apple Silicon.

  #+begin_src sh
    brew install openjdk@17
  #+end_src

  #+begin_src sh
    sudo ln -svfn \
         $(brew --prefix)/opt/openjdk@17/libexec/openjdk.jdk \
         /Library/Java/JavaVirtualMachines/openjdk-17.jdk
  #+end_src

* Switch Versions

  To see installed Java versions (assuming they have been properly symlinked):

  #+begin_src sh :results output
    env
  #+end_src

  Note that =java_home -V= writes the "verbose" part of this output to stderr,
  and only writes the current version to stdout.

  #+header: :prologue "exec 2>&1" :epilogue "true"
  #+begin_src sh :results output
    /usr/libexec/java_home -V
  #+end_src

  #+RESULTS:
  : Matching Java Virtual Machines (3):
  :     19.0.2 (arm64) "Homebrew" - "OpenJDK 19.0.2" /opt/homebrew/Cellar/openjdk/19.0.2/libexec/openjdk.jdk/Contents/Home
  :     17.0.6 (arm64) "Homebrew" - "OpenJDK 17.0.6" /opt/homebrew/Cellar/openjdk@17/17.0.6/libexec/openjdk.jdk/Contents/Home
  :     17.0.2 (x86_64) "GraalVM Community" - "GraalVM CE 22.0.0.2" /Library/Java/JavaVirtualMachines/graalvm-ce-java17-22.0.0.2/Contents/Home
  : /opt/homebrew/Cellar/openjdk/19.0.2/libexec/openjdk.jdk/Contents/Home

  The java's installed via brew:

  #+begin_src sh :results output
    ls $(brew --prefix)/Cellar | grep openjdk
  #+end_src

  #+RESULTS:
  : openjdk
  : openjdk@17

  #+begin_src sh
    /usr/libexec/java_home -v 17
  #+end_src

  #+RESULTS:
  : /opt/homebrew/Cellar/openjdk@17/17.0.4.1/libexec/openjdk.jdk/Contents/Home

  You can set =JAVA_HOME= to be one of those paths like this:

  #+begin_src bash
    export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
  #+end_src

* GraalVM

  Installation

  #+name: q
  #+begin_example
    query {
      repository(name: "graalvm-ce-builds", owner: "graalvm") {
        releases(orderBy: {field: CREATED_AT, direction: ASC}, last: 1) {
          nodes {
            name
            releaseAssets(first: 100) {
              nodes {
                name
                downloadUrl
              }
            }
          }
        }
      }
    }
  #+end_example

  #+header: :backend babashka
  #+header: :var q=q
  #+begin_src clojure :results output
    (require '[babashka.curl :as curl])

    (def token (System/getenv "GITHUB_TOKEN"))

    (def resp
      (curl/post
       "https://api.github.com/graphql"
       {:headers {"Authorization"
                  (str "bearer " token)}
        :body (json/generate-string {:query q})}))

    (def names-and-urls
      (-> resp
         :body
         (json/parse-string true)
         (get-in [:data :repository :releases :nodes])
         first ;; todo: map
         (get-in [:releaseAssets :nodes])))

    ;; Can there be multiple release assets with the same name?
    (def my-items
      (filter ;; should this be a reduce?
       #(=
         "graalvm-ce-java17-darwin-amd64-22.1.0.tar.gz"
         (:name %))
       names-and-urls))

    (-> my-item
        first
        :downloadUrl)
  #+end_src

  #+RESULTS:



foo

  : "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.1.0/graalvm-ce-java17-darwin-amd64-22.1.0.tar.gz"
