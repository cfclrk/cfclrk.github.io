#+TITLE: Git
#+SETUPFILE: ../setup.org

* Rebasing

** To Ancestor

   You created a sequence of commits, =feat-1= and =feat-2=, and you realize
   "hrmm, =feat-2= doesn't actually depend on =feat-1=. I could make both of
   these PRs against =main= at the same time."

   Given a repo like this:

   #+header: :dir (org-outline-tempdir 'empty) :mkdirp yes
   #+begin_src bash :results silent
     git init
     touch A && git add A && git commit -m "A"
     touch B && git add B && git commit -m "B"
     git checkout -b "feat-1"
     touch C && git add C && git commit -m "C"
     git checkout -b "feat-2"
     touch D && git add D && git commit -m "D"
   #+end_src

   #+NAME: RebaseToAncestor1
   #+header: :results file :file-ext png
   #+header: :output-dir (expand-file-name "img" notes/project-directory)
   #+header: :dir (org-outline-tempdir)
   #+begin_src sh :exports both
     gitdot --png
   #+end_src

   #+RESULTS: RebaseToAncestor1
   [[file:../img/RebaseToAncestor1.png]]

   You want =feat-2= and =feat-1= to both be based off =main=. You can't just
   rebase =feat-2= on =main=:

   #+header: :dir (org-outline-tempdir)
   #+begin_src sh
     git checkout feat-2
     git rebase main
   #+end_src

   #+RESULTS:
   : Current branch feat-2 is up to date.

   #+NAME: RebaseToAncestor2
   #+header: :results file :file-ext png
   #+header: :output-dir (expand-file-name "img" notes/project-directory)
   #+header: :dir (org-outline-tempdir)
   #+begin_src sh :exports both
     gitdot --png
   #+end_src

   #+RESULTS: RebaseToAncestor2
   [[file:../img/RebaseToAncestor2.png]]

   Nothing happens, because a rebase replays commits onto the new base, and in
   this case that would just replay the =feat-1= and =feat-2= commits on =main=
   again (changing nothing).

   Solution: only reply the =feat-2= commit on =man= using =--onto= with a
   cut-point! The form of the command is =git rebase --onto <Target> <Cut
   Point>=.

   #+header: :dir (org-outline-tempdir)
   #+begin_src sh
     git checkout feat-2
     git rebase --onto main feat-1
   #+end_src

   #+RESULTS:

   #+NAME: RebaseToAncestor3
   #+header: :results file :file-ext png
   #+header: :output-dir (expand-file-name "img" notes/project-directory)
   #+header: :dir (org-outline-tempdir)
   #+begin_src sh :exports both
     gitdot --png
   #+end_src

   #+RESULTS: RebaseToAncestor3
   [[file:../img/RebaseToAncestor3.png]]

** To Specific Commit

   Given a repo like this:

   #+header: :dir (org-outline-tempdir 'empty) :mkdirp yes
   #+begin_src bash :results silent
     git init
     touch A && git add A && git commit -m "A"
     git checkout -b "feat-1"
     touch B && git add B && git commit -m "B"
     git checkout main
     touch C && git add C && git commit -m "C"
     touch D && git add D && git commit -m "D"
   #+end_src

   #+NAME: RebaseToCommit1
   #+header: :results file :file-ext png
   #+header: :output-dir (expand-file-name "img" notes/project-directory)
   #+header: :dir (org-outline-tempdir)
   #+begin_src sh :exports both
     gitdot --png --msg
   #+end_src

   #+RESULTS: RebaseToCommit1
   [[file:../img/RebaseToCommit1.png]]

   Rebasing =feat-1= on =main= would make =B= point to =D=. But say we wanted to
   rebase =B= on to =C= instead?

   #+begin_src sh
     git checkout feat-1
     git rebase --onto C
   #+end_src

* I Accidentally...

** Commited to the Wrong Branch

   You locally committed to =main= instead of =develop=, but you haven't pushed
   the commit yet.

   - Soft-reset main back to origin/develop
   - The committed changes will now be staged
   - Switch to develop branch
   - Commit staged changes

   #+begin_src sh
     git reset --soft origin/develop
   #+end_src

   If switching to the other branch doesn't work, stash the changes first.

** Rebased Remote Branch

   You rebased, and then remembered that the branch you were on has already been
   pushed to a remote repo. You shouldn't push this rebase!

   - You need to return the current branch to where it was before the rebase.

** Ammended Remote Commit

   You ran a =git commit --ammend=, then realized you've already pushed the
   commit you were ammending! You can't push the ammended commit! (You /can/,
   but that would be rewriting history on the remote server).

   - Reset soft to =origin/<branch-name>=. Then the changes you just committed
     will be staged.
   - Commit again as a new commit.

** Committed Locally Before Pulling Remote

   Somebody pushed changes to your branch while you were still committing
   locally. Now your branch and the remote branch have diverged.

   - Option 1: Merge remote into local. Just do a git merge of
     remote/branch-name.

* Fixup

  You make a change that ought to have been part of a previous commit, but that
  previous commit is not the last commit (so you can't just =--amend= the last
  commit).

  First, make this new commit and mark it as a =fixup= of the offending commit:

  #+begin_src sh
    git commit --fixup fb2f677
  #+end_src

  Next, run a =rebase --squash=, which does a rebase where fixup commits are
  squashed into the commits that they fix up. The commit hash is the commit where
  the rebase is started from.

  #+begin_src sh
    git rebase -i --squash ac5db87
  #+end_src

* Refs

** HEAD

   HEAD is usually a symbolic ref, meaning it points to another ref. The
   exception is when you are in a detached HEAD state, in which case HEAD points
   directly to a commit.

   #+begin_src sh
     git symbolic-ref HEAD
   #+end_src

   Some ways to print the SHA of the HEAD ref:

   #+begin_src sh
     git rev-parse HEAD
   #+end_src

   #+begin_src sh
     git log -1 --format='%H'
   #+end_src

** Branches

   Current branch name:

   #+begin_src sh
     git rev-parse --abbrev-ref HEAD
   #+end_src

* Diff

  Diff a branch with the commit you branched from.

  #+begin_src sh
    git diff my-branch...main
  #+end_src

* First Commit

  Some ways to find the first commit in a Git repository:

  #+begin_src sh
    git show $(git rev-list --max-parents=0 HEAD)
  #+end_src

  #+begin_src sh
    git log --reverse
  #+end_src

* Latest commit

  Fun way to get the latest commit hash on a repo! (Or really, any commit hash
  for any ref). You don't even need the repo cloned locally.

  #+begin_src sh
    git ls-remote \
        https://github.com/cfclrk/rules_clojure.git \
        refs/heads/master
  #+end_src

  #+RESULTS:
  | 5605a9fb9653157579f7b86d9bd9b5993eec2b31 | refs/heads/master |

* Files changed in commit

  #+begin_src sh
    git diff-tree -r --no-commit-id \
        --name-only $sha
  #+end_src

* Tags

** Get Project Version From Tag

   I got this from cider [[https://github.com/clojure-emacs/cider/blob/18bb5e12bfff4196de4102b5abce226dcd7d4b9a/Makefile#L4][here]].

   #+begin_src sh
     git describe --tags --abbrev=0
   #+end_src

** Is HEAD a tag?

   If HEAD is a tag, this will print the tag name. If not, it prints nothing.

   #+begin_src sh
     git tag --points-at HEAD
   #+end_src

** List Tags Matching Pattern

  #+begin_src sh
    git tag --list "v*"
  #+end_src

* Project Root Dir

  #+begin_src sh
    git rev-parse --show-toplevel
  #+end_src

* Tools and Resources

  - [[https://github.com/arzzen/git-quick-stats/blob/master/git-quick-stats][git-quick-stats]]: Bash script that shows cool stats of git repos.
