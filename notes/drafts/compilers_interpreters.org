#+TITLE: Compilers and Intepreters

* Overview

  Frontend and backend

  Frontend

** Scanner

   - Reads one character at a time
   - Names: scanner, lexer, tokenizer. Originally "scanning" and "lexing" were
     distinct phases, where scanning meant reading a program into memory.
   - If this is a regular language (the most specific type of formal language),
     tokens can be recognized with a regex or DFA.
     - DFAs and regular expressions are equivalent! So, usually implemented with
       regular expressions. (Example when it isn't?)
   - Some languages are not regular, but context-free (one level up the Chomsky
     Heirarchy). E.g. Python, because the indentation level is important.

   Question: is this what the "reader" is in Clojure?

   Can sometimes be as simple Python =string.split()=

   "Lexical analysis"

   Splits the program into tokens. Might be a completely invalid program, there
   is no syntax checking here. A token is the "word" (lexeme) plus some metadata
   about the token. Without more metadata, the parsing stage would have to read
   the whole token again to figure out what it is, which would effectively
   result in another full scan of the whole source code.

   Creates the first internal representation: a list of tokens.

** Parser

   - NFA
   - "Pushdown automata" aka stack machine
   - Defined by a grammar (e.g. in BNF. What are other forms?)

   You can generate parsers from grammars. Or hand-write them. Hand-written ones
   are typically recursive descent I think? Generated parsers are I think
   usually/always table-driven?

   "Syntactical analysis"

   Parsing only passes if it is a syntactically valid program. i.e. a program
   that satisfies the grammar.

   Creates the second, or maybe first "real" internal representation: an AST.

   I've seen it said that the primary goal of parsing is to determine program
   validity. But I feel like the main point of parsing is to create an internal
   representation that a program can work with. Incidentally parsing fails on
   invalid input, as do all programs to some extent.

* Compiler vs Interpreter

  A compiler translates code from one language to another. Presumably, the
  compiler translates the source program into an equivalent program in the
  target language.

  Compilers need not only operate on "programs"; they might translate documents
  from one form to another. For example: pandoc.

  An interpreter also /executes/ code.

  From [[https://norvig.com/lispy.html][lispy]], Peter Norvig describes the process of execution like this:

  #+begin_quote
  The internal representation is then processed according to the /semantic
  rules/ of the language, thereby carrying out the computation.
  #+end_quote

  One might say all languages are intepreted, and the CPU is just the "lowest
  level interpreter". Not sure I agree with that: "intepret" connotes some kind
  of translation taking place. A binary specifically built for a certain CPU
  still needs a bunch of stuff to actually execute on that CPU (fetched from
  disk, instructions properly loaded to the right places one at a time, step
  through executing ops with the registers). That's definitely a hard problem,
  but I don't think that's what people mean when they talk about interpreters.
  That's really more about computer architecture and OS implementation.
  Implementing an intepreter doesn't include such things. We need to use
  different words for different things.

* Kinds of Intepreters

** AST


** Bytecode

   A bytecode interpreter is sometimes called a "virtual machine", as in: "the
   Python virtual machine".

   Advantage:

   - Saves space
   - More granular instructions, closer to a physical machine

* Stack Machines vs Register Machines

** Stack Machine

   [[https://gist.github.com/rexim/a52f89e6500ac6328f017d0db1b518b8][Example in C]].

   - "pushdown automata"
   - Can interpret an NFA

   The program is an array of instructions. Each instruction is an operation and
   maybe some additinal data (e.g. "push 35").

   The stack machine is another program that has a stack. It reads the program
   array one item at a time.

   Result is always on top of the stack

** Register Machine
