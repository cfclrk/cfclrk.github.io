#+TITLE: Using Multiple GitHub Accounts
#+SETUPFILE: ../setup.org

* The Problem

  You have multiple GitHub accounts, and you want git to automatically use a
  certain GitHub account based on the local directory you're working in.

  In this article I set things up so that:

  - Repos in your *work GitHub org* cloned into =~/Work/= use your *work* GitHub
    account
  - Repos in your *work GitHub org* cloned into =~/go/= use your *work* GitHub
    account
  - Repos elsewhere use your *home* GitHub account

  My git configuration [[https://github.com/cfclrk/dotfiles/tree/master/xdg_config/git][on GitHub]] is generated from this article. My SSH
  configuration is also on GitHub [[https://github.com/cfclrk/dotfiles/blob/master/.ssh/config][here]].

** Limitations

  *Gists*: There is a concise solution for GitHub /repos/, but /Gists/ are
  harder to handle. In this setup, Gists in your *home* account will "just
  work". Gists in your *work* account need to be individually added to your git
  config file. All Gists are publically readable, so I tend to use Gists less
  frequently at work.

  *Repos Outside of Your Work Org*: Your work account is only used when working
  on repos from your work GitHub org. If you work on a project in another GitHub
  org, your personal SSH key is used (... I think). That would be a problem if
  you are trying to make signed commits.

* The Git Config

  First, tell git to use different git configurations depending on the directory
  a project is in. Git supports this with the [[https://git-scm.com/docs/git-config#_conditional_includes][includeIf]] directive. Do this by
  creating the following two files.

  =~/.config/git/config=

  - Ignore the =[github]= part, that's for [[https://github.com/magit/forge][Emacs forge]].

  #+begin_src gitconfig :tangle ~/.config/git/config
    [user]
        name = Chris Clark
        email = cfclrk@gmail.com
    [github]
        user = cfclrk
    [init]
        defaultBranch = main
    [url "git@github-home"]
        insteadOf = git@github.com
    [url "git@gist-home"]
        insteadOf = git@gist.github.com
    [includeIf "gitdir:~/Work/"]
        path = work.gitconfig
    [includeIf "gitdir:~/go/"]
        path = work.gitconfig
  #+end_src

  =~/.config/git/work.gitconfig=

  - Ignore the =[github]= part, that's for [[https://github.com/magit/forge][Emacs forge]].

  #+begin_src gitconfig :tangle ~/.config/git/work.gitconfig
    [user]
        email = chris.clark@ironnet.com
    [github]
        user = chrisc-ironnet

    # These "insteadOf" values must be more specific than
    # the ones for the github-home account.
    [url "git@github-work:IronNetCybersecurity"]
        insteadOf = git@github.com:IronNetCybersecurity
    [url "git@github-work:chrisc-ironnet"]
        insteadOf = git@github.com:chrisc-ironnet

    # Each of your gists must be individually enumerated.
    [url "git@gist-work:a9e0dc9676cab129bc7b37a352257524.git"]
        insteadOf = git@gist.github.com:a9e0dc9676cab129bc7b37a352257524
  #+end_src

  Obviously, update values for your name, email address, your work's GitHub
  organization name, and your Gist URLs.

  That's it for the git config! Move on to [[#the-ssh-config]]. The next two
  subsections explain the above, if you are interested.

** Git URL Rewriting
   :PROPERTIES:
   :CUSTOM_ID: url-rewriting
   :END:

   Git URL-rewriting uses the [[https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf][insteadOf]] directive.

   #+begin_src gitconfig
     [url "git@github-home"]
         insteadOf = git@github.com
   #+end_src

   This is saying: "Mr. Git, any time you see a URL that starts with
   =git@github.com=, please just pretend like the URL actually starts with
   =git@github-home=".

   For example, in [[https://github.com/cfclrk/cfclrk.github.io][the git repository]] where I'm writing this article, I can cat
   the =.git/config= file and see the /real/ remote:

   #+begin_src bash :results output :dir ~/Projects/cfclrk.com
     cat .git/config | grep "\[remote" -A 2
   #+end_src

   #+RESULTS:
   : [remote "origin"]
   : 	url = git@github.com:cfclrk/cfclrk.github.io.git
   : 	fetch = +refs/heads/*:refs/remotes/origin/*

   But, if you use a =git= command (like =git remote=) to view that same value,
   you will see the /rewritten/ form of the URL:

   #+begin_src bash :results output :dir ~/Projects/cfclrk.com
     git remote -v
   #+end_src

   #+RESULTS:
   : origin	git@github-home:cfclrk/cfclrk.github.io.git (fetch)
   : origin	git@github-home:cfclrk/cfclrk.github.io.git (push)

   You may specify multiple =url.insteadOf= directives in a git config file. All
   the directives will be loaded and the most specific match is used. From the
   [[https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf][insteadOf]] documentation:

   #+begin_quote
   When more than one insteadOf strings match a given URL, the longest match is
   used.
   #+end_quote

   The "=github-home=" string can be any string, so long as you also use the
   /same/ string in your SSH config (as explained in the section
   [[#the-ssh-config]]).

** Git Config Loading
   :PROPERTIES:
   :CUSTOM_ID: config-loading
   :END:

   Git loads /all/ applicable config files. If one option is set multiple times
   (potentially form differnt files), the last value wins.

   For example: consider a =~/.config/git/config= like this:

   #+begin_src gitconfig
     [includeIf "gitdir:/"]
         path = home.gitconfig
     [includeIf "gitdir:~/Work/"]
         path = work.gitconfig
   #+end_src

   Now, when you run a git command in a project located at =~/Work/projectA/=,
   git does something like:

   - Load the default =~/.config/git/config= file
     - Set =user.email= to =cfclrk@gmail.com=
   - Does =[includeIf "gitdir:~/Work/"]= apply?
     - *Yes!* Load the work.gitconfig file
     - Set =user.email= to =chris.clark@ironnet.com=

   Both the default and /work/ config files get loaded. The email address ends
   up being =cfclrk@ironnet.com= since that was the *last* value loaded for the
   =user.email= option. The determining factor is the /order in which the
   configuration is defined/, and the /last value wins/.

   So, if you define multiple =includeIf= directives that overwrite each other,
   you should specify the directives in order from /most general/ to /most
   specific/.

   /Aside/: The value of =user.email= is the only piece of information GitHub
   uses when determining what profile picture to display next to a commit. You
   can set that email address to anything! E.g. set it to
   =torvalds@linux-foundation.org=, and GitHub will happily put Linus Torvalds'
   picture next to your git commits. And to be sure, [[https://news.ycombinator.com/item?id=10005577][that happens]]. You can
   /partially/ mitigate this problem of attribution by using [[https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work][signed commits]], as
   discussed in the section [[#signed-commits]].

* The SSH Config
  :PROPERTIES:
  :CUSTOM_ID: the-ssh-config
  :END:

  Assuming you use the =git= protocol to clone repositories (not =https= like
  some kind of animal), you have at least two SSH keys for GitHub -- one for
  each GitHub account (GitHub will not allow you to use the same SSH key for
  both accounts). Assuming you've [[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh][created]] those, your =~/.ssh= directory looks
  something like:

  #+begin_example
    $ tree ~/.ssh/
    /Users/cfclrk/.ssh/
    ├── config
    ├── github-home
    ├── github-home.pub
    ├── github-work
    └── github-work.pub
  #+end_example

  The =~/.ssh/config= file allows you to associate SSH keys with DNS domains.
  And /this/ is where all the URL-rewriting stuff comes in to play! We can tell
  SSH to use one SSH key for =github-home=, and another SSH key for
  =github-work=. Without the URL-rewriting, we would have two SSH keys for
  =github.com=, and that confuses SSH.

  File: =~/.ssh/config=

  #+begin_src conf
    Host github-home
    HostName       github.com
    IdentityFile   ~/.ssh/github-home
    IdentitiesOnly yes

    Host github-work
    HostName       github.com
    User           git
    IdentityFile   ~/.ssh/github-work
    IdentitiesOnly yes

    Host gist-home
    HostName       gist.github.com
    User           git
    IdentityFile   ~/.ssh/github-home
    IdentitiesOnly yes

    Host gist-work
    HostName       gist.github.com
    User           git
    IdentityFile   ~/.ssh/github-work
    IdentitiesOnly yes
  #+end_src

* Signed Commits
  :PROPERTIES:
  :CUSTOM_ID: signed-commits
  :END:

  In [[#config-loading]], I mentioned how to make git commits appear to be
  associated with someone else's GitHub account. To (somewhat) mitigate that
  situation, GitHub allows you to upload a PGP key to your GitHub account, and
  GitHub displays a "Verified" badge on commits that are signed with a PGP key
  that matches the email address associated with the commit.

  You can configure git to automatically [[https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work][sign commits with a PGP key]].

  TODO: I haven't actually set this up with one (let alone two!) accounts.

  If you have a setup to automatically sign commits when using multiple GitHub
  accounts (with different email addresses) let me know!

* Resources

  https://yayimorphology.org/ssh-identities-made-easy.html
